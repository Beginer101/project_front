let lat = 48.3794;
let lon = 31.1656;
let m = 5;

async function getWeather() {
    const cityInput = document.getElementById('cityInput'); // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ id
    const city = encodeURIComponent(cityInput.value.trim());

    if (!city) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞');
        return;
    }

    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=c719263ca8bb1d6df089e31251468f9f&units=metric&lang=uk`;

    try {
        const response = await fetch(apiUrl);
        const data = await response.json();

        if (data.cod === '404') {
            alert('–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é.');
            return;
        }

        if (response.ok) {
            const weatherData = processWeatherData(data);
            updateWeatherBoxes(weatherData); // –î–æ–¥–∞—î–º–æ –±–æ–∫—Å–∏
        } else {
            throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞:", error);
        alert(`–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É: ${error.message}`);
    }
}

function processWeatherData(data) {
    const weatherData = {
        temperature: [],
        conditions: []
    };

    const sevenDaysForecast = data.list.reduce((acc, item) => {
        const date = new Date(item.dt * 1000);
        const dayKey = date.toISOString().split('T')[0];
        if (!acc[dayKey]) {
            acc[dayKey] = item;
        }
        return acc;
    }, {});

    Object.values(sevenDaysForecast).slice(0, 7).forEach((dayData) => {
        const date = new Date(dayData.dt * 1000);
        const dayName = date.toLocaleDateString('uk-UA', { weekday: 'long' });

        weatherData.temperature.push({ day: dayName, value: dayData.main.temp });
        weatherData.conditions.push({ day: dayName, value: dayData.weather[0].main });
    });

    return weatherData;
}

function updateWeatherBoxes(weatherData) {
    const weatherBoxesContainer = document.getElementById('weather-boxes');
    weatherBoxesContainer.innerHTML = ''; // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–º—ñ—Å—Ç

    weatherData.conditions.forEach((item, index) => {
        const temp = weatherData.temperature[index].value;

        const box = document.createElement('div');
        box.classList.add('weather-box');
        box.innerHTML = `
            <div class="date">${new Date().toLocaleDateString('uk-UA', { month: 'long', day: 'numeric' })}</div>
            <div class="day">${item.day}</div>
            <div class="icon">${getWeatherIcon(item.value)}</div>
            <div class="temperature">
                <span>${temp.toFixed(1)}¬∞C</span><br>
            </div>
        `;

        weatherBoxesContainer.appendChild(box);
    });
}

function getWeatherIcon(condition) {
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –∑–∞ –ø–æ–≥–æ–¥–Ω–∏–º —Å—Ç–∞–Ω–æ–º
    const icons = {
        Clear: "‚òÄÔ∏è",
        Clouds: "‚òÅÔ∏è",
        Rain: "üåßÔ∏è",
        Snow: "‚ùÑÔ∏è",
        Thunderstorm: "‚ö°",
        Drizzle: "üå¶Ô∏è",
        Mist: "üå´Ô∏è"
    };

    return icons[condition] || "‚ùì";
}

async function getCoordinates() {
    const city = document.getElementById('cityInput').value;
    const resultDiv = document.getElementById('result');
    const weatherMap = document.getElementById('weatherMap');
    if (!weatherMap) {
        console.error('–ï–ª–µ–º–µ–Ω—Ç iframe –∑ id="weatherMap" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        return;
    }

    try {
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ OpenStreetMap
        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&accept-language=uk&q=${encodeURIComponent(city)}`);
        const data = await response.json();

        if (data.length > 0) {
            lat = data[0].lat;
            lon = data[0].lon;
            m = 10

            const { display_name } = data[0];

            // –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º—ñ—Å—Ç–æ
            resultDiv.innerHTML = `<strong>–ú—ñ—Å—Ç–æ:</strong> ${display_name}<br>`;

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ URL –¥–æ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∞
            const proxyUrl = `https://proxy-ten-sage.vercel.app/uk/weather/maps/#coords=${m}/${lat}/${lon}&map=temperature~hourly~auto~2%20m%20above%20gnd~none`;

            weatherMap.src = proxyUrl;
        } else {
            resultDiv.innerHTML = '–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
        }
    } catch (error) {
        resultDiv.innerHTML = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç';
        console.error(error);
    }
}

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ Enter
document.getElementById('cityInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        getCoordinates();
        getWeather();
    }
});

function updateMap(mapType) {
    const weatherMap = document.getElementById('weatherMap');
    const proxyUrl = `https://proxy-ten-sage.vercel.app/uk/weather/maps/#coords=${m}/${lat}/${lon}&map=${mapType}&_=${Date.now()}`;
    weatherMap.src = '';
    weatherMap.src = proxyUrl;
}


document.getElementById('precipitation').addEventListener('click', () => {
    updateMap('precipitationProbability~hourly~auto~0.1%20mm~none');
});

document.getElementById('temperature').addEventListener('click', () => {
    updateMap('temperature~hourly~auto~2%20m%20above%20gnd~none');
});

document.getElementById('wind').addEventListener('click', () => {
    updateMap('windAnimation~rainbow~auto~10%20m%20above%20gnd~none');
});

